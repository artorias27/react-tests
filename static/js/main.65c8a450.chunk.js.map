{"version":3,"sources":["useFetchJobs.js","Job.js","JobPagination.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","axios","CancelToken","source2","useEffect","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","length","cancel","useFetchJobs","jobList","map","key","Container","param","target","prevParams","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.65c8a450.chunk.js","sourcesContent":["import { useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ACTIONS = {\r\n  MAKE_REQUEST: \"make-request\",\r\n  GET_DATA: \"get-data\",\r\n  ERROR: \"error\",\r\n  UPDATE_HAS_NEXT_PAGE: \"next-page\"\r\n};\r\n// const BASE_URL = \"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json\";\r\nconst BASE_URL = \"https://jobs.github.com/positions.json\";\r\n\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.MAKE_REQUEST:\r\n      return { loading: true, jobs: [] };\r\n    case ACTIONS.GET_DATA:\r\n      return { ...state, loading: false, jobs: action.payload.jobs };\r\n    case ACTIONS.ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload.error,\r\n        jobs: [],\r\n      };\r\n    case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n      return { ...state, hasNextPage: action.payload.hasNextPage };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function useFetchJobs(params, page) {\r\n  const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true });\r\n\r\n  const source = axios.CancelToken.source();\r\n  const source2 = axios.CancelToken.source();\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.MAKE_REQUEST });\r\n    axios.get(BASE_URL, {\r\n        cancelToken: source.token,\r\n        params: { markdown: true, page: page, ...params }\r\n    }).then(res => {\r\n        // console.log(res.data)\r\n        dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } });\r\n    }).catch(e => {\r\n        // if(axios.isCancel(e)) { console.log(\"mutliple request cancelled\", e.message) }\r\n        if(axios.isCancel(e)) return\r\n        dispatch({ type: ACTIONS.ERROR, payload: { error: e } });\r\n    });\r\n\r\n    axios.get(BASE_URL, {\r\n      cancelToken: source2.token,\r\n      params: { markdown: true, page: page + 1, ...params }\r\n    }).then(res => {\r\n      // console.log(res.data)\r\n      dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } });\r\n    }).catch(e => {\r\n      // if(axios.isCancel(e)) { console.log(\"mutliple request cancelled\", e.message) }\r\n      if(axios.isCancel(e)) return\r\n      dispatch({ type: ACTIONS.ERROR, payload: { error: e } });\r\n    })\r\n\r\n    return () => {\r\n        source2.cancel();\r\n        source.cancel();\r\n    }\r\n  }, [params, page]);\r\n\r\n  return state;\r\n}\r\n","import React, {useState} from \"react\";\r\nimport { Card, Badge, Button, Collapse } from \"react-bootstrap\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nexport default function Job({ job }) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Card className=\"mb-3\">\r\n      <Card.Body>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <Card.Title>\r\n              {job.title} -{\" \"}\r\n              <span className=\"text-muted font-weight-light\">\r\n                {job.company}\r\n              </span>\r\n            </Card.Title>\r\n            <Card.Subtitle className=\"text-muted mb-2\">\r\n              {new Date(job.created_at).toLocaleDateString()}\r\n            </Card.Subtitle>\r\n            <Badge variant=\"secondary\" className=\"mr-2\">\r\n              {job.type}\r\n            </Badge>\r\n            <Badge variant=\"secondary\">{job.location}</Badge>\r\n            <div style={{ wordBreak: \"break-all\" }}>\r\n              <ReactMarkdown source={job.how_to_apply} />\r\n            </div>\r\n          </div>\r\n          <img\r\n            className=\"d-none d-md-block\"\r\n            height=\"50\"\r\n            alt={job.company}\r\n            src={job.company_logo}\r\n          />\r\n        </div>\r\n        <Card.Text>\r\n          <Button \r\n            variant=\"primary\"\r\n            onClick={() => setOpen(prevOpen => !prevOpen)}>\r\n                { open ? \"Hide Details\" : \"Open Details\" }\r\n        </Button>\r\n        </Card.Text>\r\n        <Collapse in={open}>\r\n          <div className=\"mt-4\">\r\n            <ReactMarkdown source={job.description} />\r\n          </div>\r\n        </Collapse>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nexport default function JobPagination({ page, setPage, hasNextPage }) {\r\n\r\n  const adjustPage = amount => {\r\n      setPage(prevPage => prevPage + amount);\r\n    //   setPage(page + amount);\r\n  }\r\n  return (\r\n    <Pagination>\r\n      {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)} />}\r\n      {page !== 1 && <Pagination.Item onClick={() => setPage(1)} >1</Pagination.Item>}\r\n      {page > 2 && <Pagination.Ellipsis />}\r\n      {page > 2 && <Pagination.Item onClick={() => adjustPage(-1)} >{page - 1}</Pagination.Item>}\r\n      <Pagination.Item active>{page}</Pagination.Item>\r\n      {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)} >{page + 1}</Pagination.Item>}\r\n      {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\r\n    </Pagination>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Form, Col } from 'react-bootstrap';\r\n\r\nexport default function SearchForm({ params, onParamChange }) {\r\n    return (\r\n        <Form className=\"mb-4\">\r\n            <Form.Row className=\"align-items-end\">\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control onChange={onParamChange} value={params.description} \r\n                    name=\"description\" type=\"text\" />\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Location</Form.Label>\r\n                    <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\r\n                </Form.Group>\r\n                <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n                    <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full_time\" label=\"Only Full Time\" type=\"checkbox\" className=\"mb-2\" />\r\n                </Form.Group>\r\n            </Form.Row>\r\n        </Form>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchJobs';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport Job from './Job';\nimport JobPagination from './JobPagination';\nimport SearchForm from './SearchForm';\n\nfunction App() {\n  const [params, setParams] = useState({});\n  const [page, setPage] = useState(1);\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page);\n\n  const handleParamChange = e => {\n    const param = e.target.name;\n    const value = e.target.value;\n    setPage(1);\n    setParams(prevParams => {\n      return { ...prevParams, [param]: value}\n    });\n    // setParams({ \n    //     ...params, [param]: value\n    // });\n  }\n\n  let jobList = jobs.map( job => <Job key={job.id} job={job}></Job> );\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\">GitHub Jobs</h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n      {loading && <h1 className=\"mb-4\">Loading...</h1>}\n      {error && <h1 className=\"mb-4\">Error! Try refreshing.</h1>}\n      { jobList }\n      <JobPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}